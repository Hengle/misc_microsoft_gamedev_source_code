#if 0
//
// Generated by 2.0.7776.0
//
//   fxc /T ps_1_1 /E PS_CxformTextureMultiply scaleform.hlsl /Fh
//    PS_CxformTextureMultiply.hlsl.h
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxmul        c2       1
//   cxadd        c3       1
//   tex0         s0       1
//

// Shader type: pixel 

xps_3_0
defconst cxadd, float, vector, [1, 4], c3
defconst cxmul, float, vector, [1, 4], c2
defconst tex0, sampler2d, object, [1, 1], s0
config AutoSerialize=false
config AutoResource=false
config PsMaxReg=2
// PsExportColorCount=1
// PsSampleControl=centers

dcl_texcoord r0.xy

def c252, 0, 0, 0, 0
def c253, 0, 0, 0, 0
def c254, 0, 0, 0, 0
def c255, -1, 1, 0, 0


    exec
    tfetch2D r0, r0.xy, tf0
    alloc colors
    exece
    mul r1, r0, c2
    add r2.xyz, c3.xyz, c255.x
  + movs r0.y, r1.w
    add r0.x, r1.w, c255.x
  + addsc r0.y, c3.w, r0.y
    add r1.xyz, r2.xyz, r1.xyz
  + addsc r1.w, c3.w, r0.x
    mad oC0, r1, r0.y, c255.y

// PDB hint 00000000-00000000-00000000

#endif

// This microcode is in native DWORD byte order.

const DWORD g_xps_PS_CxformTextureMultiply[] =
{
    0x102a1100, 0x00000114, 0x000000ac, 0x00000000, 0x00000024, 0x000000c8, 
    0x000000f0, 0x00000000, 0x00000000, 0x000000a0, 0x0000001c, 0x00000093, 
    0xffff0300, 0x00000003, 0x0000001c, 0x00000000, 0x0000008c, 0x00000058, 
    0x00020003, 0x00010000, 0x00000060, 0x00000000, 0x00000070, 0x00020002, 
    0x00010000, 0x00000060, 0x00000000, 0x00000076, 0x00030000, 0x00010000, 
    0x0000007c, 0x00000000, 0x63786164, 0x6400abab, 0x00010003, 0x00010004, 
    0x00010000, 0x00000000, 0x63786d75, 0x6c007465, 0x783000ab, 0x0004000c, 
    0x00010001, 0x00010000, 0x00000000, 0x70735f33, 0x5f300032, 0x2e302e37, 
    0x3737362e, 0x3000abab, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 
    0x00000014, 0x01fc0010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000040, 0x0000006c, 0x10000200, 0x00000004, 0x00000000, 0x00000821, 
    0x00010001, 0x00000001, 0x00003050, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0xbf800000, 0x3f800000, 0x00000000, 
    0x00000000, 0x00011002, 0x00001200, 0xc4000000, 0x00005003, 0x00002200, 
    0x00000000, 0x10080001, 0x1f1ff688, 0x00004000, 0xc80f0001, 0x00000000, 
    0xa1000200, 0x14270002, 0x00c06c1b, 0x2003ff01, 0xb0210000, 0x001b6c01, 
    0x8001ff03, 0xb0870101, 0x00c0c000, 0xc0020103, 0xc80f8000, 0x0000b1b1, 
    0xcb0100ff, 0x00000000, 0x00000000, 0x00000000
};
